generics in go
interfaces and code generation to the rescue
8 Jul 2014
Tags: foo, bar, baz

Wes Freeman
Chief Gopher, IAI
wfreeman@infoa.com
https://github.com/wfreeman/
@wefreema

* We'll attempt to cover...

- What are generics?
- How interfaces, structs, user-defined types work in go
- How built-in containers work with these concepts (slice, map, channel, etc.)
- Caveats...
- Why we need generics to cover some use-cases
- How gen works to generate code
- How to write your own template for gen
- Rob Pike jumps into the game

* What are generics?

We're going to go with the following definition: 

The ability to provide type information to functions or types (primarily container types), so they safely deal with only the types specified, and you don't need to cast things as they go in or out.

Syntax:

  // Java:
  HashMap<Long, Wut> m = new HashMap<Long, Wut>();

  // Scala:
  val m = HashMap[Long, Wut]()

  // C++:
  std::unordered_map<long,Wut> m;

  // Go:
  m := map[long]Wut{}

* The trouble is...

The other languages allow user defined container types to accept a type parameter in the implementation, where go does not. Go's map is built in.

There's no way in Go to define a new AwesomeContainer<K,V> type that can handle many types.

Luckily, you don't need to do this that often.

But when you do, you sure feel like Go could use some help. (more on that later...)

* Go's built-in containers can already do this pretty well

A quick review...

You can pass in interfaces, structs, etc. to the built-in container types (maps, slices...), and they'll usually be happy, with some caveats.

.play built-in.go /START OMIT/,/END OMIT/

* This protects you from doing bad things

Consider:

.play built-in-no.go /START OMIT/,/END OMIT/

* ... most of the time

Consider the typical enum idiom:

.play built-in-most.go /START OMIT/,/END OMIT/

* Interfaces can be used in a lot of places

Idiomatic go uses simple interfaces with a small number of functions. They can be combined/nested so you can vary the granularity easily.

Usually they are simply functions turned into nouns. Structs with the Close() function implement the Closer interface.

Some common ones you'll probably use from the io package:

	type Reader interface {
		Read(p []byte) (n int, err error)
	}

	type Closer interface {
		Close() error
	}

	type ReadCloser interface {
		Reader
		Closer
	}

* Inheritance in go...

Anonymous members give the inheriting type the methods/attributes of the contained type. Employee will have a .Name.

.play inheritance-person.go

* Inheritance...

Will this work?

.play inheritance-no.go /START OMIT/,/END OMIT/

* Inheritance...

Interfaces to the rescue:

.play inheritance.go /START OMIT/,/END OMIT/

* Inheritance...

Interfaces to the rescue:

.play inheritance.go /^func main/,/^}/

* Polymorphism... 

.code shapes.go /START OMIT/,/END OMIT/

* Polymorphism... 

We can do cool stuff, like call the Area() method on the various Shapes in a slice:

.play shapes.go /^func main/,/^}/

* Even maps can take interface keys and values

As long as the interfaces are comparable.

	wutterShapeMap := map[Wutter]Shape{}

The other built-in containers allow interfaces as well--channels, slices, etc.

This sort of flexibility can take you a long way.

You can even build an efficient queue/stack out of a slice in a few lines.

* The trouble is for the 10% use case

When you need something that isn't handled by the built-in types. Say you need a thread-safe hash map, or a tree set. 

People coming from other worlds, C++/C#/Java, expect to find these sorts of "generic containers" sprinkled about in standard libraries. Or when they're not, you can take advantage of the generics syntax to write them yourself.

* You might try something like this

.play threadsafehashmap.go /START OMIT/,/END OMIT/

While this will work, you're going to find yourself casting and type asserting all over the place. This leads to brittle and ugly code (in my opinion).

* Ugly and brittle...

.play threadsafehashmap.go /^func main/,/^}/

* This is where gen comes in

Matt Sherman's gen tool uses the go templating functionality to generate code through "typewriters" and some doc hint tags on custom types.

http://clipperhouse.github.io/gen/

  gen is an attempt to bring some generics-like functionality to Go, 
  with inspiration from C#’s Linq, JavaScript’s Array methods and the 
  underscore library. Operations include filtering, grouping, sorting and more.

* gen already supports a few basics

List, Set, Ring containers. 

  // +gen containers:"Set,List,Ring"
  type Thing struct {
      ...
  }

Typed slices with predicates and sorting out of the box.

Docs hinted at doing more things: trees, maps, etc.

* I wanted a sorted set

I decided to see how to implement a typewriter to make my sorted set generic

.code container.go

* Sorted set continued..

.code templates.go

* Future gen plans... (for me)

More templates!

Concurrent containers, map containers (multi-type), sorted maps. GPU-enhanced containers?

Attempt some functional programming standards like a map and fold function--not sure if this will be functional enough to be useful, but might be worth trying.

* Rob Pike

The big Gopher himself started getting people riled up on the mailing list with his "go generate" proposal--even managed to shut down google docs.

http://goo.gl/zoy6Kr

Shares a lot of goals from gen, but seems more complex to use.
